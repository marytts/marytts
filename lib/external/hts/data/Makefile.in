# ----------------------------------------------------------------- #
#           The HMM-Based Speech Synthesis System (HTS)             #
#           developed by HTS Working Group                          #
#           http://hts.sp.nitech.ac.jp/                             #
# ----------------------------------------------------------------- #
#                                                                   #
#  Copyright (c) 2001-2011  Nagoya Institute of Technology          #
#                           Department of Computer Science          #
#                                                                   #
#                2001-2008  Tokyo Institute of Technology           #
#                           Interdisciplinary Graduate School of    #
#                           Science and Engineering                 #
#                                                                   #
# All rights reserved.                                              #
#                                                                   #
# Redistribution and use in source and binary forms, with or        #
# without modification, are permitted provided that the following   #
# conditions are met:                                               #
#                                                                   #
# - Redistributions of source code must retain the above copyright  #
#   notice, this list of conditions and the following disclaimer.   #
# - Redistributions in binary form must reproduce the above         #
#   copyright notice, this list of conditions and the following     #
#   disclaimer in the documentation and/or other materials provided #
#   with the distribution.                                          #
# - Neither the name of the HTS working group nor the names of its  #
#   contributors may be used to endorse or promote products derived #
#   from this software without specific prior written permission.   #
#                                                                   #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND            #
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,       #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF          #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE          #
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS #
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,          #
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED   #
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     #
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON #
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   #
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY    #
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE           #
# POSSIBILITY OF SUCH DAMAGE.                                       #
# ----------------------------------------------------------------- #
# Modified by Marcela Charfuelan (DFKI) 2011 to use  MARY system    #
#  - Generates voicing strengths and Fourier Magnitudes for mixed   #
#    exitation. (mag not used in this version)                      # 
#  - label and mlf are done in java with the voiceimport tools:     #
#    HMMVoiceMakeData.makeLabels()                                  #
#  - questions file is done in java with the voiceimport tools:     #
#    HMMVoiceMakeData.makeQuestions()                               #
#  ---------------------------------------------------------------  #

# setting
SPEAKER = @SPEAKER@
DATASET = @DATASET@

# awk, perl, bc and tcl
AWK   = @AWK@
PERL  = @PERL@
BC    = @BC@
TCLSH = @TCLSH@
WC    = @WC@

# SPTK commands
X2X     = @X2X@
FRAME   = @FRAME@
WINDOW  = @WINDOW@
MGCEP   = @MGCEP@
LPC2LSP = @LPC2LSP@
STEP    = @STEP@
MERGE   = @MERGE@
VSTAT   = @VSTAT@
NRAND   = @NRAND@
SOPR    = @SOPR@
VOPR    = @VOPR@
NAN     = @NAN@
MINMAX  = @MINMAX@

# dumpfeats to extract utterance information
DUMPFEATS = @DUMPFEATS@

# speech analysis conditions
SAMPFREQ    = @SAMPFREQ@   # Sampling frequency (48kHz)
FRAMELEN    = @FRAMELEN@   # Frame length in point (1200 = 48000 * 0.025)
FRAMESHIFT  = @FRAMESHIFT@ # Frame shift in point (240 = 48000 * 0.005)
WINDOWTYPE  = @WINDOWTYPE@ # Window type -> 0: Blackman 1: Hamming 2: Hanning
NORMALIZE   = @NORMALIZE@  # Normalization -> 0: none  1: by power  2: by magnitude
FFTLEN      = @FFTLEN@     # FFT length in point
FREQWARP    = @FREQWARP@   # frequency warping factor
GAMMA       = @GAMMA@      # pole/zero weight for mel-generalized cepstral (MGC) analysis
MGCORDER    = @MGCORDER@   # order of MGC analysis
STRORDER    = @STRORDER@     # order of STR analysis, number of filter banks for mixed excitation
MAGORDER    = @MAGORDER@    # order of Fourier magnitudes for pulse excitation generation
LNGAIN      = @LNGAIN@     # use logarithmic gain rather than linear gain
LOWERF0     = @LOWERF0@    # lower limit for f0 extraction (Hz)
UPPERF0     = @UPPERF0@    # upper limit for f0 extraction (Hz)
NOISEMASK   = @NOISEMASK@  # standard deviation of white noise to mask noises in f0 extraction

# windows for calculating delta features
MGCWIN      = win/mgc.win
STRWIN       = win/str.win
MAGWIN       = win/mag.win
LF0WIN      = win/lf0.win
NMGCWIN     = @NMGCWIN@
NSTRWIN      = @NSTRWIN@   # Mary added str for mixed excitation
NMAGWIN      = @NMAGWIN@   # Mary added mag for pulse excitation generation out of Fourier magnitudes
NLF0WIN     = @NLF0WIN@

# filter taps filename for voicing stregths analysis in mixed excitation
STRFILTERNAME = @STRFILTERNAME@

# HTS-festival (original)
all: analysis labels
analysis: mgc lf0 cmp
labels: label mlf list scp

# HTS-MARY 
# label and mlf are done in java with the voiceimport tools: HMMVoiceMakeData.makeLabels()
# questions file is done in java with the voiceimport tools: HMMVoiceMakeData.makeQuestions() 
all-mary: analysis-mary list scp
analysis-mary: mgc lf0 str-mary cmp-mary


mgc:
	# Extracting MGC or MGC-LSP coefficients from raw audio
	mkdir -p mgc

	for raw in raw/*.raw; do \
		base=`basename $${raw} .raw`; \
		min=`$(X2X) +sf $${raw} | $(MINMAX) | $(X2X) +fa | head -n 1`; \
		max=`$(X2X) +sf $${raw} | $(MINMAX) | $(X2X) +fa | tail -n 1`; \
		if [ -s $${raw} -a $${min} -gt -32768 -a $${max} -lt 32767 ]; then \
			$(X2X) +sf $${raw} > tmp; \
			if [ $(GAMMA) -eq 0 ]; then \
				echo "Extracting MGC coefficients from $${raw}"; \
				$(FRAME) -l $(FRAMELEN) -p $(FRAMESHIFT) tmp | \
				$(WINDOW) -l $(FRAMELEN) -L $(FFTLEN) -w $(WINDOWTYPE) -n $(NORMALIZE) | \
				$(MGCEP) -a $(FREQWARP) -m $(MGCORDER) -l $(FFTLEN) -e 1.0E-08 > mgc/$${base}.mgc; \
			else \
				echo "Extracting MGC-LSP coefficients from $${raw}"; \
				SAMPKHZ=`expr $(SAMPFREQ) / 1000`; \
				if [ $(LNGAIN) -eq 1 ]; then \
					GAINOPT="-l"; \
				fi; \
				$(FRAME) -l $(FRAMELEN) -p $(FRAMESHIFT) tmp | \
				$(WINDOW) -l $(FRAMELEN) -L $(FFTLEN) -w $(WINDOWTYPE) -n $(NORMALIZE) | \
				$(MGCEP) -a $(FREQWARP) -c $(GAMMA) -m $(MGCORDER) -l $(FFTLEN) -e 1.0E-08 -o 4 | \
				$(LPC2LSP) -m $(MGCORDER) -s $${SAMPKHZ} $${GAINOPT} -n $(FFTLEN) -p 8 -d 1.0E-08 > mgc/$${base}.mgc; \
			fi; \
			if [ -n "`$(NAN) mgc/$${base}.mgc`" ]; then \
				echo " Failed to extract MGC coefficients from $${raw}"; \
				rm -f mgc/$${base}.mgc; \
			fi; \
		fi; \
	done

	rm -f tmp

lf0:
	# Extracting log f0 sequence from raw audio
	mkdir -p lf0

	for raw in raw/*.raw; do \
		base=`basename $${raw} .raw`; \
		min=`$(X2X) +sf $${raw} | $(MINMAX) | $(X2X) +fa | head -n 1`; \
		max=`$(X2X) +sf $${raw} | $(MINMAX) | $(X2X) +fa | tail -n 1`; \
		if [ -s $${raw} -a $${min} -gt -32768 -a $${max} -lt 32767 ]; then \
			echo "Extracting f0 from $${raw}"; \
			count=`echo "0.005 * $(SAMPFREQ)" | $(BC) -l`; \
			$(STEP) -l `printf "%.0f" $${count}` -v 0.0 | \
			$(X2X) +fs > tmp.head; \
			count=`echo "0.025 * $(SAMPFREQ)" | $(BC) -l`; \
			$(STEP) -l `printf "%.0f" $${count}` -v 0.0 | \
			$(X2X) +fs > tmp.tail; \
			cat tmp.head $${raw} tmp.tail | \
			$(X2X) +sf > tmp; \
			leng=`$(X2X) +fa tmp | $(WC) -l`; \
			$(NRAND) -l $${leng} | $(SOPR) -m $(NOISEMASK) | $(VOPR) -a tmp | \
			$(X2X) +fs > tmp.raw; \
			$(TCLSH) scripts/getf0.tcl -l -lf0 -H $(UPPERF0) -L $(LOWERF0) -p $(FRAMESHIFT) -r $(SAMPFREQ) tmp.raw | \
			$(X2X) +af > lf0/$${base}.lf0; \
			if [ -n "`$(NAN) lf0/$${base}.lf0`" ]; then \
				echo " Failed to extract log f0 from $${raw}"; \
				rm -f lf0/$${base}.lf0; \
			fi; \
		fi; \
	done

	rm -f tmp tmp.head tmp.tail tmp.raw

# Mary added str for mixed excitation: extract voicing strenghts
str-mary:
	# Extracting strengths from $(STRORDER) filtered bands of raw audio, it requires $(STRORDER) filters.  
        # By default the number of filters is 5 and located in ../data/filters/mix_excitation_filters.txt 
        # (see a description of this file format in ../data/get_str.tcl) 
	mkdir -p str
	for raw in raw/*.raw; do \
		base=`basename $${raw} .raw`; \
		if [ -s $${raw} ]; then \
			echo "Extracting strengths from $${raw}"; \
			count=`echo "0.005 * $(SAMPFREQ)" | $(BC) -l`; \
			$(STEP) -l `printf "%.0f" $${count}` | \
			$(X2X) +fs > tmp.head; \
			count=`echo "0.025 * $(SAMPFREQ)" | $(BC) -l`; \
			$(STEP) -l `printf "%.0f" $${count}` | \
			$(X2X) +fs > tmp.tail; \
			cat tmp.head $${raw} tmp.tail > tmp; \
			$(TCLSH) scripts/get_str.tcl -l -H $(UPPERF0) -L $(LOWERF0) -p $(FRAMESHIFT) -r $(SAMPFREQ) -f $(STRFILTERNAME) -n $(STRORDER) tmp | \
			$(X2X) +af > str/$${base}.str; \
		fi; \
	done
	rm -f tmp tmp.head tmp.tail



# Mary added mag for mixed excitation: extract Fourier magnitudes 
mag-mary:
	# Extracts first the residual from inverse filtering using SPTK, then it uses snack to
        # extract F0 and with this values searchs for the first ten or more harmonics. 
	mkdir -p mag
	for raw in raw/*.raw; do \
		base=`basename $${raw} .raw`; \
		if [ -s $${raw} ]; then \
			echo "Extracting Fourier magnitudes from $${raw}"; \
			count=`echo "0.005 * $(SAMPFREQ)" | $(BC) -l`; \
			$(STEP) -l `printf "%.0f" $${count}` | \
			$(X2X) +fs > tmp.head; \
			count=`echo "0.015 * $(SAMPFREQ)" | $(BC) -l`; \
			$(STEP) -l `printf "%.0f" $${count}` | \
			$(X2X) +fs > tmp.tail; \
			cat tmp.head $${raw} tmp.tail > tmp.raw; \
			if [ $(BYTESWAP) -eq 1 ]; then \
				$(SWAB) +s tmp.raw | $(X2X) +sf > tmp;  \
			else \
				$(X2X) +sf tmp.raw > tmp; \
			fi; \
			$(# echo "Using inverse filtering to extract a residual signal from $${raw}"; )\
			$(FRAME) +f -p $(FRAMESHIFT) tmp | \
			$(WINDOW) -w $(WINDOWTYPE) -n $(NORMALIZE) | \
			$(GCEP) -c 2 -m $(MGCORDER) -e 0.001 > tmp.gcep; \
			$(IGLSADF) -k -c 2 -m $(MGCORDER) -p $(FRAMESHIFT) tmp.gcep < tmp > tmp.res; \
			$(TCLSH) scripts/get_mag.tcl -l -H $(UPPERF0) -L $(LOWERF0) -m $(MAGORDER) -p $(FRAMESHIFT) -r $(SAMPFREQ) tmp.raw tmp.res | \
			$(X2X) +af > mag/$${base}.mag; \
		fi; \
	done
	rm -f tmp tmp.head tmp.tail tmp.res tmp.raw tmp.head tmp.gcep





cmp: 
	# Composing training data files from mgc and lf0 files
	mkdir -p cmp

	for j in 1; do \
		MGCDIM=`expr $(MGCORDER) + 1`; \
		LF0DIM=1; \
		MGCWINDIM=`expr $(NMGCWIN) \* $${MGCDIM}`; \
		LF0WINDIM=`expr $(NLF0WIN) \* $${LF0DIM}`; \
		BYTEPERFRAME=`expr 4 \* \( $${MGCWINDIM} + $${LF0WINDIM} \)`; \
		for mgc in mgc/$(DATASET)_$(SPEAKER)_*.mgc; do \
			base=`basename $${mgc} .mgc`; \
			MGCWINS=""; \
			LF0WINS=""; \
			if [ -s $${mgc} -a -s lf0/$${base}.lf0 ]; then \
				i=1; \
				echo "Composing training data for $${base}"; \
				while [ $${i} -le $(NMGCWIN) ]; do \
					eval MGCWINS=\"$${MGCWINS} $(MGCWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${MGCDIM} $${mgc} $${MGCWINS} > cmp/tmp.mgc; \
				i=1; \
				while [ $${i} -le $(NLF0WIN) ]; do \
					eval LF0WINS=\"$${LF0WINS} $(LF0WIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${LF0DIM} lf0/$${base}.lf0 $${LF0WINS} > cmp/tmp.lf0; \
				$(MERGE) +f -s 0 -l $${LF0WINDIM} -L $${MGCWINDIM} cmp/tmp.mgc < cmp/tmp.lf0 > cmp/tmp.cmp; \
				$(PERL) scripts/addhtkheader.pl $(SAMPFREQ) $(FRAMESHIFT) $${BYTEPERFRAME} 9 cmp/tmp.cmp > cmp/$${base}.cmp; \
			fi; \
		done; \
	done
	rm -f cmp/tmp.*

# Mary added str for mixed excitation
cmp-mary: 
	# Composing training data files from mgc, lf0, and str files
	mkdir -p cmp
	for j in 1; do \
		MGCDIM=`expr $(MGCORDER) + 1`; \
		LF0DIM=1; \
                STRDIM=$(STRORDER); \
                echo "STRDIM=$${STRDIM}"; \
		MGCWINDIM=`expr $(NMGCWIN) \* $${MGCDIM}`; \
		LF0WINDIM=`expr $(NLF0WIN) \* $${LF0DIM}`; \
                STRWINDIM=`expr $(NSTRWIN) \* $${STRDIM}`; \
                MGCPLUSLF0=`expr $${MGCWINDIM} + $${LF0WINDIM}`; \
                echo "MGCWINDIM=$${MGCWINDIM}"; \
                echo "LF0WINDIM=$${LF0WINDIM}"; \
                echo "STRWINDIM=$${STRWINDIM}"; \
                echo "MGCPLUSLF0=$${MGCPLUSLF0}"; \
		BYTEPERFRAME=`expr 4 \* \( $${MGCWINDIM} + $${LF0WINDIM} + $${STRWINDIM} \)`; \
                echo "BYTEPERFRAME=$${BYTEPERFRAME}"; \
		for mgc in mgc/*.mgc; do \
			base=`basename $${mgc} .mgc`; \
			MGCWINS=""; \
			LF0WINS=""; \
			STRWINS=""; \
			if [ -s $${mgc} -a -s lf0/$${base}.lf0 -a -s str/$${base}.str ]; then \
                                $(# echo "for mgc"; )\
				i=1; \
				echo "Composing training data (mgc+lf0+str) for $${base}"; \
				while [ $${i} -le $(NMGCWIN) ]; do \
					eval MGCWINS=\"$${MGCWINS} $(MGCWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${MGCDIM} $${mgc} $${MGCWINS} > cmp/tmp.mgc; \
                                $(# echo "for lf0"; ) \
				i=1; \
				while [ $${i} -le $(NLF0WIN) ]; do \
					eval LF0WINS=\"$${LF0WINS} $(LF0WIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${LF0DIM} lf0/$${base}.lf0 $${LF0WINS} > cmp/tmp.lf0; \
                                $(# echo "for strengths"; ) \
				i=1; \
				while [ $${i} -le $(NSTRWIN) ]; do \
					eval STRWINS=\"$${STRWINS} $(STRWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
                                $(# echo "STRWINS=$${STRWINS}"; ) \
				$(PERL) scripts/window.pl $${STRDIM} str/$${base}.str $${STRWINS} > cmp/tmp.str; \
                                $(# echo "now merge temporary files: tmp.mgc, tmp.lf0, tmp.str"; )  \
				$(MERGE) +f -s 0 -l $${LF0WINDIM} -L $${MGCWINDIM} cmp/tmp.mgc < cmp/tmp.lf0 > cmp/tmp.cmp1; \
                                $(MERGE) +f -s 0 -l $${STRWINDIM} -L $${MGCPLUSLF0} cmp/tmp.cmp1 < cmp/tmp.str > cmp/tmp.cmp; \
                                $(# echo "add HTK header"; ) \
				$(PERL) scripts/addhtkheader.pl $(SAMPFREQ) $(FRAMESHIFT) $${BYTEPERFRAME} 9 cmp/tmp.cmp > cmp/$${base}.cmp; \
			fi; \
		done; \
	done
	rm -f cmp/tmp.*




# Mary added str and mag for mixed excitation
cmp-mag-mary: 
	# Composing training data files from mgc, lf0, str and mag files
	mkdir -p cmp
	for j in 1; do \
		MGCDIM=`expr $(MGCORDER) + 1`; \
		LF0DIM=1; \
                STRDIM=$(STRORDER); \
		MAGDIM=$(MAGORDER); \
                echo "STRDIM=$${STRDIM}"; \
		echo "MAGDIM=$${MAGDIM}"; \
		MGCWINDIM=`expr $(NMGCWIN) \* $${MGCDIM}`; \
		LF0WINDIM=`expr $(NLF0WIN) \* $${LF0DIM}`; \
                STRWINDIM=`expr $(NSTRWIN) \* $${STRDIM}`; \
		MAGWINDIM=`expr $(NMAGWIN) \* $${MAGDIM}`; \
                MGCPLUSLF0=`expr $${MGCWINDIM} + $${LF0WINDIM}`; \
		MGCPLUSLF0PLUSSTR=`expr $${MGCWINDIM} + $${LF0WINDIM} + $${STRWINDIM}`; \
                echo "MGCWINDIM=$${MGCWINDIM}"; \
                echo "LF0WINDIM=$${LF0WINDIM}"; \
                echo "STRWINDIM=$${STRWINDIM}"; \
		echo "MAGWINDIM=$${MAGWINDIM}"; \
                echo "MGCPLUSLF0=$${MGCPLUSLF0}"; \
		echo "MGCPLUSLF0PLUSSTR=$${MGCPLUSLF0PLUSSTR}"; \
		BYTEPERFRAME=`expr 4 \* \( $${MGCWINDIM} + $${LF0WINDIM} + $${STRWINDIM} + $${MAGWINDIM} \)`; \
                echo "BYTEPERFRAME=$${BYTEPERFRAME}"; \
		$(# for mcp in mcp/*.mcp; do )\
		for mgc in mgc/*.mgc; do \
			base=`basename $${mgc} .mgc`; \
			MGCWINS=""; \
			LF0WINS=""; \
			STRWINS=""; \
			MAGWINS=""; \
			if [ -s $${mgc} -a -s lf0/$${base}.lf0 -a -s str/$${base}.str -a -s mag/$${base}.mag ]; then \
                                $(# for mgc )\
				i=1; \
				echo "Composing training data (mgc+lf0+str+mag) for $${base}"; \
				while [ $${i} -le $(NMGCWIN) ]; do \
					eval MGCWINS=\"$${MGCWINS} $(MGCWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${MGCDIM} $${mgc} $${MGCWINS} > cmp/tmp.mgc; \
                                $(# for lf0 )\
				i=1; \
				while [ $${i} -le $(NLF0WIN) ]; do \
					eval LF0WINS=\"$${LF0WINS} $(LF0WIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
				$(PERL) scripts/window.pl $${LF0DIM} lf0/$${base}.lf0 $${LF0WINS} > cmp/tmp.lf0; \
                                $(# for strengths )\
				i=1; \
				while [ $${i} -le $(NSTRWIN) ]; do \
					eval STRWINS=\"$${STRWINS} $(STRWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
                                $(# echo "STRWINS=$${STRWINS}"; )\
				$(PERL) scripts/window.pl $${STRDIM} str/$${base}.str $${STRWINS} > cmp/tmp.str; \
                                $(# for Fourier magnitudes )\
				i=1; \
				while [ $${i} -le $(NMAGWIN) ]; do \
					eval MAGWINS=\"$${MAGWINS} $(MAGWIN)$${i}\"; \
					i=`expr $${i} + 1`; \
				done; \
                                $(# echo "MAGWINS=$${MAGWINS}"; )\
				$(PERL) scripts/window.pl $${MAGDIM} mag/$${base}.mag $${MAGWINS} > cmp/tmp.mag; \
                                $(# now merge temporary files: tmp.mgc, tmp.lf0, tmp.str, tmp.mag  )\
				$(MERGE) +f -s 0 -l $${LF0WINDIM} -L $${MGCWINDIM} cmp/tmp.mgc < cmp/tmp.lf0 > cmp/tmp.cmp1; \
                                $(MERGE) +f -s 0 -l $${STRWINDIM} -L $${MGCPLUSLF0} cmp/tmp.cmp1 < cmp/tmp.str > cmp/tmp.cmp2; \
				$(MERGE) +f -s 0 -l $${MAGWINDIM} -L $${MGCPLUSLF0PLUSSTR} cmp/tmp.cmp2 < cmp/tmp.mag > cmp/tmp.cmp; \
                                $(# add HTK header )\
				$(PERL) scripts/addhtkheader.pl $(SAMPFREQ) $(FRAMESHIFT) $${BYTEPERFRAME} 9 cmp/tmp.cmp > cmp/$${base}.cmp; \
			fi; \
		done; \
	done
	rm -f cmp/tmp.*


label:
	# Extracting monophone and fullcontext labels from utterance files
	mkdir -p labels/mono
	mkdir -p labels/full

	for utt in utts/$(DATASET)_$(SPEAKER)_*.utt; do \
		base=`basename $${utt} .utt`; \
		if [ -s $${utt} ]; then \
			$(DUMPFEATS)    -eval     scripts/extra_feats.scm \
					-relation Segment \
					-feats    scripts/label.feats \
					-output   tmp \
					$${utt}; \
		fi; \
		$(AWK) -f scripts/label-full.awk tmp > labels/full/$${base}.lab; \
		$(AWK) -f scripts/label-mono.awk tmp > labels/mono/$${base}.lab; \
	done
	rm -f tmp

mlf:
	# Generating monophone and fullcontext Master Label Files (MLF)
	echo "#!MLF!#" > labels/mono.mlf
	echo "\"*/*.lab\" -> \"@PWD@/data/labels/mono\"" >> labels/mono.mlf

	echo "#!MLF!#" > labels/full.mlf
	echo "\"*/*.lab\" -> \"@PWD@/data/labels/full\"" >> labels/full.mlf

list:
	# Generating a fullcontext model list file
	mkdir -p lists

	rm -f tmp
	for lab in labels/full/*.lab; do \
		if [ -s $${lab} -a -s labels/mono/`basename $${lab}` -a -s cmp/`basename $${lab} .lab`.cmp ]; then \
			sed -e "s/.* //g" $${lab} >> tmp; \
		fi \
	done
	sort -u tmp > lists/full.list
	rm -f tmp

	# Generating a fullcontext model list file which includes unseen models
	rm -f tmp
	cat lists/full.list > tmp
	for lab in labels/gen/*.lab; do \
		sed -e "s/.* //g" $${lab} >> tmp; \
	done
	sort -u tmp > lists/full_all.list
	rm -f tmp

	# Generating a monophone list file
	rm -f tmp
	for lab in labels/mono/*.lab; do \
		if [ -s $${lab} -a -s labels/full/`basename $${lab}` -a -s cmp/`basename $${lab} .lab`.cmp ]; then \
			sed -e "s/.* //g" $${lab} >> tmp; \
		fi \
	done
	sort -u tmp > lists/mono.list
	rm -f tmp

scp:
	# Generating a trainig data script
	mkdir -p scp

	rm -f scp/train.scp
	for cmp in @PWD@/data/cmp/*.cmp; do \
		if [ -s $${cmp} -a -s labels/mono/`basename $${cmp} .cmp`.lab -a -s labels/full/`basename $${cmp} .cmp`.lab ]; then \
			echo $${cmp} >> scp/train.scp; \
		fi \
	done

	# Generating a generation label script
	rm -f scp/gen.scp
	for lab in @PWD@/data/labels/gen/*.lab; do \
		echo $${lab} >> scp/gen.scp; \
	done


clean: clean-mgc clean-lf0 clean-cmp clean-label clean-mlf clean-list clean-scp

clean-mary: clean-mgc clean-lf0 clean-str clean-mag clean-cmp clean-label clean-mlf clean-list clean-scp

clean-mgc:
	rm -rf mgc

clean-lf0:
	rm -rf lf0

clean-str:
	rm -rf str

clean-mag:
	rm -rf mag

clean-cmp:
	rm -rf cmp

clean-label:
	rm -rf labels/mono
	rm -rf labels/full

clean-mlf:
	rm -f labels/*.mlf

clean-list:
	rm -rf lists

clean-scp:
	rm -rf scp

distclean: clean
	rm -f Makefile

.PHONY: all analysis labels mgc lf0 cmp label mlf list scp clean
