##########################################################################
# Copyright (C) 2006,2009 DFKI GmbH.
# All rights reserved. Use is subject to license terms.
#
# Permission is hereby granted, free of charge, to use and distribute
# this software and its documentation without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of this work, and to
# permit persons to whom this work is furnished to do so, subject to
# the following conditions:
# 
#  1. The code must retain the above copyright notice, this list of
#     conditions and the following disclaimer.
#  2. Any modifications must be clearly marked as such.
#  3. Original authors' names are not deleted.
#  4. The authors' names are not used to endorse or promote products
#     derived from this software without specific prior written
#     permission.
# 
# DFKI GMBH AND THE CONTRIBUTORS TO THIS WORK DISCLAIM ALL WARRANTIES WITH 
# REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF 
# MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL DFKI GMBH NOR THE 
# CONTRIBUTORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR 
# PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 
# ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF 
# THIS SOFTWARE.
##########################################################################
# MARY TTS configuration file.
##########################################################################

name = marybase
marybase.version = 4.3.0

# Declare "group names" as component that other components can require.
# These correspond to abstract "groups" of which this component is an instance.
#provides = \
#    group-name-1 \
#    group-name-2

# List the dependencies, as a whitespace-separated list.
# We can require a component by name or by an abstract "group name" 
# as listed under the "provides" element.
#requires = \
#    module-name-1 \
#    group-name-2

requires = a-language
   
# For each required component, an optional minimum version and an optional
# download url can be given.
# requires.module-name-1.version = 4.3.0
# requires.module-name-1.download = http://mary.dfki.de/download/mary-install-3.x.x.jar

#requires.a-language.download = http://mary.dfki.de/download/mary-install-4.x.x.jar
#requires.a-language.download.package-name = english

###########################################################################
############################## The Modules  ###############################
###########################################################################
# For keys ending in ".list", values will be appended across config files,
# so that .list keys can occur in several config files.
# For all other keys, values will be copied to the global config, so
# keys should be unique across config files.

# Java classes to use as the modules, as a whitespace-separated list.
# These have to implement marytts.modules.MaryModule.
# For each input type + output type, only one Module may be listed
# across all components, or an Exception will be thrown.
# No particular order is required -- a processing pipeline from input data type
# to output data type will be computed on-line.

modules.classes.list = \
        marytts.modules.Synthesis \
        marytts.modules.TextToMaryXML \
        marytts.modules.SableParser \
        marytts.modules.SSMLParser \
        marytts.modules.APMLParser \
        marytts.modules.EmotionmlParser \
        marytts.modules.JTokeniser \
        marytts.modules.DummyTokens2Words \
        marytts.modules.ProsodyGeneric \
        marytts.modules.PronunciationModel \
        marytts.modules.TargetFeatureLister \
        marytts.modules.HalfPhoneTargetFeatureLister \
        marytts.modules.AcousticModeller \
        marytts.modules.RealisedAcoustparamsExtractor \
        marytts.modules.RealisedDurationsExtractor \
        marytts.modules.HTSEngine \
        marytts.modules.PraatTextGridGenerator

        marytts.modules.MaryXMLToMbrola \
        marytts.modules.FreeTTS2FestivalUtt \

# Optionally, one component can request a module declared in another module
# to be ignored. This can make sense if the component provides a better
# version of the same functionality as some base implementation.
# ignore.modules.classes.list = \
#         marytts.modules.SomeBasicModule \
#         marytts.modules.AnotherBasicModule


# Java classes to use as the modules, as a whitespace-separated list.
# These have to implement marytts.modules.synthesis.WaveformSynthesizer.

synthesizers.classes.list = \
		marytts.unitselection.UnitSelectionSynthesizer \
        marytts.modules.synthesis.HMMSynthesizer

# Java classes to use as the audio effects post-processors, as a whitespace-separated list.
# These have to implement marytts.signalproc.effects.AudioEffect


audioeffects.classes.list = \
        marytts.signalproc.effects.VolumeEffect \
        marytts.signalproc.effects.VocalTractLinearScalerEffect \
        marytts.signalproc.effects.HMMF0ScaleEffect \
        marytts.signalproc.effects.HMMF0AddEffect \
        marytts.signalproc.effects.HMMDurationScaleEffect \
        marytts.signalproc.effects.RobotiserEffect \
        marytts.signalproc.effects.LpcWhisperiserEffect \
        marytts.signalproc.effects.StadiumEffect \
        marytts.signalproc.effects.ChorusEffectBase \
        marytts.signalproc.effects.FilterEffectBase \
        marytts.signalproc.effects.JetPilotEffect


# Feature processor managers
# (empty list)
# Language packs must add one each to this list, e.g.:
#   featuremanager.classes.list = marytts.features.FeatureProcessorManager(en_GB)
# or a custom class such as:
#   featuremanager.classes.list = marytts.language.en.gb.features.FeatureProcessorManager
# Voice-specific feature processor managers, if any, are defined
# in voice.<voicename>.featuremanager.
featuremanager.classes.list =


####################################################################
####################### Global settings  ###########################
####################################################################

# Type of server? (socket/http/commandline)
server = http
server.http.parallelthreads = 6

# server socket port:
socket.port = 59125

# module timeout (in milliseconds):
modules.timeout = 60000

# Perform a power-on self test for each module:
# auto (true in server mode, false in command-line mode)
# true
# false
modules.poweronselftest = auto

# Cache synthesis results
# true | false
cache = false
cache.file = MARY_BASE/tmp/cache
cache.clearOnStart = false

# If less than the following number of bytes can be allocated, report
# a low memory condition which may affect system behaviour.
mary.lowmemory = 20000000

# Whether to validate MaryXML module output
# (only useful for debugging):
maryxml.validate.modules = false

# Whether to validate MaryXML input:
maryxml.validate.input = true

# Config file for log4j logging system:
# (use a filesystem path as follows):
# log.config = MARY_BASE/conf/log4j.properties
# log.config = /path/to/my/log4j.properties
log.config = jar:/marytts/util/log4j.properties

####################################################################
####################### Module settings  ###########################
####################################################################

# When converting plain text into RAWMARYXML, split into paragraphs at
# empty lines?
texttomaryxml.splitintoparagraphs = true

# How to store the audio data we get from synthesis modules:
# ram = in ram
# file = in file
# auto = if in "low memory condition", in file, else in ram
# (see mary.lowmemory above)
synthesis.audiostore = auto

# Preload the freetts lexicon at system startup?
# - auto: preload if running as server, do not preload otherwise
# - true
# - false
freetts.lexicon.preload = auto

# fallback simple prosody model settings (to support a new language) 
fallback.prosody.tobipredparams = jar:/marytts/modules/prosody/tobipredparams.xml
fallback.prosody.accentPriorities  = jar:/marytts/modules/prosody/POSAccentPriorities.properties
fallback.prosody.paragraphdeclination = true
fallback.prosody.syllableaccents = true



###############

debug.show.cost.graph = false

################################################################
# Test stuff, for testing the property reader
# not needed for normal program execution
test.stream.existant = jar:/marytts/modules/ssml-to-mary.xsl
test.stream.nonexistant = jar:/bla/bla
